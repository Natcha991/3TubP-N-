// api/menu/nearby
import { NextResponse } from 'next/server';
import { connectToDatabase } from '@/lib/mongodb';
import Menu from '@/models/Menu';
import User from '@/models/User';

const goalToTags: Record<string, string[]> = {
  '‡∏•‡∏î‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å': ['‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏ï‡πà‡∏≥', '‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡∏ï‡πà‡∏≥', '‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•', '‡∏ï‡πâ‡∏°', '‡∏ô‡∏∂‡πà‡∏á'],
  '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠': ['‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡∏™‡∏π‡∏á', '‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏™‡∏π‡∏á'],
  '‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å': ['‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏ï‡πà‡∏≥', '‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û'],
  '‡∏•‡∏î‡πÑ‡∏Ç‡∏°‡∏±‡∏ô': ['‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡∏ï‡πà‡∏≥', '‡∏ï‡πâ‡∏°', '‡∏ô‡∏∂‡πà‡∏á', '‡∏≠‡∏ö'],
  '‡∏•‡∏µ‡∏ô': ['‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡∏™‡∏π‡∏á', '‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡∏ï‡πà‡∏≥', '‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•'],
};

const conditionToBlockedTags: Record<string, string[]> = {
  '‡πÇ‡∏£‡∏Ñ‡πÑ‡∏ï': ['‡πÇ‡∏ã‡πÄ‡∏î‡∏µ‡∏¢‡∏°‡∏™‡∏π‡∏á', '‡∏ñ‡∏±‡πà‡∏ß', '‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡∏™‡∏π‡∏á'],  // ‡πÉ‡∏ä‡πâ tag "‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡∏™‡∏π‡∏á" ‡∏ï‡∏£‡∏á ‡πÜ
  '‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô': [], // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏≤‡∏ô
  '‡πÇ‡∏£‡∏Ñ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏™‡∏π‡∏á': ['‡πÇ‡∏ã‡πÄ‡∏î‡∏µ‡∏¢‡∏°‡∏™‡∏π‡∏á'],
  '‡πÇ‡∏£‡∏Ñ‡∏´‡∏±‡∏ß‡πÉ‡∏à': ['‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡∏ï‡πà‡∏≥'], // ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ó‡∏ô "‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡∏≠‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß"
  '‡πÅ‡∏û‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£': [],
  '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏£‡∏†‡πå': [],
  '‡πÉ‡∏´‡πâ‡∏ô‡∏°‡∏ö‡∏∏‡∏ï‡∏£': [],
  '‡∏≠‡∏∑‡πà‡∏ô‡πÜ': [],
};

const lifestyleToTags: Record<string, string[]> = {
  '‡∏Å‡∏¥‡∏ô‡∏á‡πà‡∏≤‡∏¢ ‡∏≠‡∏¢‡∏π‡πà‡∏á‡πà‡∏≤‡∏¢': ['‡∏ó‡∏≥‡∏á‡πà‡∏≤‡∏¢'],
  '‡πÅ‡∏≠‡∏Ñ‡∏ó‡∏µ‡∏ü': ['‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏™‡∏π‡∏á', '‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡∏™‡∏π‡∏á'],
  '‡∏™‡∏≤‡∏¢‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ': ['‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏à‡∏ö', '‡∏ó‡∏≥‡∏á‡πà‡∏≤‡∏¢'],
  '‡∏ï‡∏¥‡∏î‡∏ö‡πâ‡∏≤‡∏ô': ['‡∏ó‡∏≥‡∏Å‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡πâ‡∏≤‡∏ô', '‡∏≠‡∏ö', '‡∏ï‡πâ‡∏°'],
  '‡∏£‡∏±‡∏Å‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û': ['‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•', '‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡∏ï‡πà‡∏≥', '‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û'],
  '‡∏Å‡∏¥‡∏ô‡∏°‡∏±‡∏á‡∏™‡∏ß‡∏¥‡∏£‡∏±‡∏ï‡∏¥': ['‡∏°‡∏±‡∏á‡∏™‡∏ß‡∏¥‡∏£‡∏±‡∏ï‡∏¥'],
  '‡∏Å‡∏¥‡∏ô‡πÄ‡∏à': ['‡∏ß‡∏µ‡πÅ‡∏Å‡∏ô'], // ‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡∏ô‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡πÄ‡∏à"
  '‡πÑ‡∏°‡πà‡∏ó‡∏≤‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå': ['‡∏ß‡∏µ‡πÅ‡∏Å‡∏ô'],
  '‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏Å': ['‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏™‡∏π‡∏á', '‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏à‡∏ö'],
  '‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏ö‡πà‡∏≠‡∏¢': ['‡∏û‡∏Å‡∏û‡∏≤‡∏™‡∏∞‡∏î‡∏ß‡∏Å', '‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏à‡∏ö'],
};

const lifestyleToBlockedTags: Record<string, string[]> = {
  '‡∏Å‡∏¥‡∏ô‡∏°‡∏±‡∏á‡∏™‡∏ß‡∏¥‡∏£‡∏±‡∏ï‡∏¥': ['‡∏´‡∏°‡∏π', '‡πÑ‡∏Å‡πà', '‡πÄ‡∏ô‡∏∑‡πâ‡∏≠', '‡∏õ‡∏•‡∏≤', '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏∞‡πÄ‡∏•', '‡∏Å‡∏∏‡πâ‡∏á'],
  '‡∏Å‡∏¥‡∏ô‡πÄ‡∏à': ['‡∏´‡∏°‡∏π', '‡πÑ‡∏Å‡πà', '‡πÄ‡∏ô‡∏∑‡πâ‡∏≠', '‡∏õ‡∏•‡∏≤', '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏∞‡πÄ‡∏•', '‡πÑ‡∏Ç‡πà', '‡∏ô‡∏°', '‡∏Å‡∏∏‡πâ‡∏á'],
  '‡πÑ‡∏°‡πà‡∏ó‡∏≤‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå': ['‡∏´‡∏°‡∏π', '‡πÑ‡∏Å‡πà', '‡πÄ‡∏ô‡∏∑‡πâ‡∏≠', '‡∏õ‡∏•‡∏≤', '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏∞‡πÄ‡∏•', '‡∏Å‡∏∏‡πâ‡∏á'],
};

function matchMenuToUser(menuTags: string[], user: any): boolean {
  const matchedTags = new Set<string>();
  const blockedTags = new Set<string>();

  const goals = (user.goal || "").split(",").map((s: string) => s.trim());
  const conditions = (user.condition || "").split(",").map((s: string) => s.trim());
  const lifestyles = (user.lifestyle || "").split(",").map((s: string) => s.trim());

  goals.forEach((goal: string) => goalToTags[goal]?.forEach(tag => matchedTags.add(tag)));
  lifestyles.forEach((lf: string) => lifestyleToTags[lf]?.forEach(tag => matchedTags.add(tag)));

  conditions.forEach((cond: string) => conditionToBlockedTags[cond]?.forEach(tag => blockedTags.add(tag)));
  lifestyles.forEach((lf: string) => lifestyleToBlockedTags[lf]?.forEach(tag => blockedTags.add(tag)));

  const hasMatch = menuTags.some(tag => matchedTags.has(tag));
  const isBlocked = menuTags.some(tag => blockedTags.has(tag));

  if (isBlocked) {
    console.log("‚õî Blocked by tags:", menuTags.filter(tag => blockedTags.has(tag)));
  }

  return hasMatch && !isBlocked;
}



function createSeededRandom(seed: string): () => number {
  let h = 0;
  for (let i = 0; i < seed.length; i++) {
    h = Math.imul(31, h) + seed.charCodeAt(i) | 0;
  }
  const s = (h >>> 0) / 4294967295;
  return () => (s + Math.random()) % 1;
}

export async function GET(req: Request) {
  try {
    await connectToDatabase();

    const { searchParams } = new URL(req.url);
    const userId = searchParams.get('userId');
    const excludeIds = searchParams.get('excludeIds') || '';
    const seed = searchParams.get('seed') || '';

    console.log('üîç seed:', seed);
    console.log('üßë userId:', userId);
    console.log('üö´ excludeIds:', excludeIds);

    if (!userId) {
      return NextResponse.json({ message: 'Missing userId' }, { status: 400 });
    }

    const user = await User.findById(userId).lean();
    if (!user) {
      return NextResponse.json({ message: 'User not found' }, { status: 404 });
    }

    console.log("üßë‚Äçüç≥ user profile ‚Üí", user); // ‚úÖ ‡πÉ‡∏™‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ

    const excluded: string[] = excludeIds
      .split(',')
      .map(id => id.trim())
      .filter(id => !!id);

    const allMenus = await Menu.find({ _id: { $nin: excluded } }).lean();
    console.log('üì¶ Total candidate menus:', allMenus.length);

    const matchedMenus = allMenus.filter(menu => matchMenuToUser(menu.tags || [], user));
    console.log('‚úÖ Matched menus after filtering by user:', matchedMenus.map(m => m.name));

    const random = seed ? createSeededRandom(seed) : () => 0.5 - Math.random();

    let brownRiceMenus = matchedMenus.filter(menu => menu.tags?.includes("‡∏Ç‡πâ‡∏≤‡∏ß‡∏Å‡∏•‡πâ‡∏≠‡∏á"));
    let otherMenus = matchedMenus.filter(menu => !menu.tags?.includes("‡∏Ç‡πâ‡∏≤‡∏ß‡∏Å‡∏•‡πâ‡∏≠‡∏á"));
    console.log('üçö Brown rice menus:', brownRiceMenus.map(m => m.name));
    console.log('üçõ Other menus:', otherMenus.map(m => m.name));

    const shuffledBrownRice = brownRiceMenus.sort(() => random() - 0.5).slice(0, 2);
    const shuffledOthers = otherMenus.sort(() => random() - 0.5);

    while (shuffledBrownRice.length < 2 && shuffledOthers.length > 0) {
      const next = shuffledOthers.shift();
      if (next) shuffledBrownRice.push(next);
    }

    const finalMenus = [...shuffledBrownRice];
    while (finalMenus.length < 5 && shuffledOthers.length > 0) {
      const next = shuffledOthers.shift();
      if (next) finalMenus.push(next);
    }

    console.log('üé≤ Shuffled brown rice:', shuffledBrownRice.map(m => m.name));
    console.log('üé≤ Shuffled others:', shuffledOthers.map(m => m.name));
    console.log('‚úÖ Final menus returned:', finalMenus.map(m => m.name));

    return NextResponse.json({ menus: finalMenus });
  } catch (err) {
    console.error('Error in nearby API:', err);
    return NextResponse.json({ message: 'Internal Server Error' }, { status: 500 });
  }
}
