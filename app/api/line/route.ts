// /app/api/line/route.ts
import { NextRequest, NextResponse } from "next/server";
import crypto from "crypto";
import { Client } from "@line/bot-sdk";
import dotenv from "dotenv";
import { connectToDatabase } from "@/lib/mongodb";
import User from "@/models/User";

dotenv.config();

// üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á LINE client
const client = new Client({
  channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN!,
  channelSecret: process.env.LINE_CHANNEL_SECRET!,
});

// üîπ ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Gemini Response
interface GeminiPart {
  text: string;
}

interface GeminiContent {
  role: string;
  parts: GeminiPart[];
}

interface GeminiResponse {
  candidates?: { content: GeminiContent }[];
}

// üîπ fallback ‡∏ñ‡πâ‡∏≤ Gemini ‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö
function getFriendlyFallback() {
  const options = [
    "‡∏≠‡πã‡∏≠ ‡∏ú‡∏°‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à ‡πÅ‡∏ï‡πà‡∏•‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö",
    "‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏ú‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏µ‡∏Å‡πÑ‡∏´‡∏°?",
    "‡∏Æ‡πà‡∏≤ ‡πÜ ‡∏ú‡∏°‡∏≠‡∏≤‡∏à‡∏ï‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å ‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏≤‡∏°‡∏≤‡∏Ñ‡∏∏‡∏¢‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤",
  ];
  return options[Math.floor(Math.random() * options.length)];
}

// üîπ ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
const questionFlow = [
  { key: "birthday", text: "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Å‡∏¥‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏£‡∏Ñ‡∏£‡∏±‡∏ö? (‡πÄ‡∏ä‡πà‡∏ô 15/02/2008)" },
  { key: "gender", text: "‡πÄ‡∏û‡∏®‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£‡∏Ñ‡∏£‡∏±‡∏ö? (‡∏ä‡∏≤‡∏¢ / ‡∏´‡∏ç‡∏¥‡∏á / ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ)" },
  { key: "weight", text: "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Å‡∏µ‡πà‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?" },
  { key: "height", text: "‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏µ‡πà‡πÄ‡∏ã‡∏ô‡∏ï‡∏¥‡πÄ‡∏°‡∏ï‡∏£‡∏Ñ‡∏£‡∏±‡∏ö?" },
  { key: "goal", text: "‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£‡∏Ñ‡∏£‡∏±‡∏ö? (‡∏•‡∏î‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å / ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏•‡πâ‡∏≤‡∏° / ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û)" },
  { key: "condition", text: "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?" },
  { key: "lifestyle", text: "‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÑ‡∏•‡∏ü‡πå‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‡∏ô‡∏±‡πà‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏ß‡∏±‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏ö‡πà‡∏≠‡∏¢?" },
];

export async function POST(req: NextRequest) {
  try {
    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏à‡∏≤‡∏Å LINE
    const body = await req.text();
    const signature = req.headers.get("x-line-signature")!;
    const hash = crypto
      .createHmac("sha256", process.env.LINE_CHANNEL_SECRET!)
      .update(body)
      .digest("base64");

    if (hash !== signature)
      return NextResponse.json({ status: "invalid signature" }, { status: 401 });

    await connectToDatabase();
    const events = JSON.parse(body).events;

    for (const event of events) {
      if (event.type !== "message" || event.message.type !== "text") continue;

      const userMessage = event.message.text.trim();
      const sourceType = event.source.type;
      const lineId = event.source.userId;

      if (!lineId) continue;

      let user = await User.findOne({ lineId });

      // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô "‡∏Å‡∏•‡∏∏‡πà‡∏°" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏£‡∏π‡∏°"
      if (sourceType === "group" || sourceType === "room") {
        // ‚û§ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà ‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ lineId
        if (!user) {
          user = await User.create({
            lineId,
            conversation: [],
            awaitingName: false,
            awaitingField: null,
          });
        }

        // ‚û§ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡∏á‡πÉ‡∏ô‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
        user.conversation.push({ role: "user", text: userMessage });
        await user.save();

        // üí¨ ‡πÉ‡∏ä‡πâ Gemini ‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
        const recentConversation = (user.conversation || []).slice(-10);
        const geminiResponse = await fetch(
          `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${process.env.NEXT_PUBLIC_GEMINI_API_KEY}`,
          {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              contents: [
                ...recentConversation.map((msg: { role: string; text: string }) => ({
                  role: msg.role,
                  parts: [{ text: msg.text }],
                })),
                {
                  role: "user",
                  parts: [
                    {
                      text: `‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏∑‡πà‡∏≠ Mr. Rice ‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏±‡∏Å‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏ä‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÉ‡∏à‡∏î‡∏µ ‡∏≠‡πà‡∏≠‡∏ô‡πÇ‡∏¢‡∏ô ‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏Å‡∏•‡∏∏‡πà‡∏° ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: "${userMessage}"`,
                    },
                  ],
                },
              ],
            }),
          }
        );

        const data: GeminiResponse = await geminiResponse.json();
        const replyText =
          data.candidates?.[0]?.content.parts?.[0]?.text || getFriendlyFallback();

        await client.replyMessage(event.replyToken, {
          type: "text",
          text: replyText,
        });
        continue;
      }


      // üëá ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏Ñ‡∏∑‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
      if (!user) {
        if (userMessage === "‡πÑ‡∏°‡πà‡∏°‡∏µ") {
          user = await User.create({
            name: "‡πÑ‡∏°‡πà‡∏°‡∏µ",
            lineId,
            conversation: [],
            awaitingName: true,
            awaitingField: null,
          });

          await client.replyMessage(event.replyToken, {
            type: "text",
            text: "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ú‡∏°‡∏ä‡∏∑‡πà‡∏≠ MR.Rice ‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∞‡πÑ‡∏£‡∏Ñ‡∏£‡∏±‡∏ö?",
          });
          continue;
        } else {
          user = await User.create({
            name: userMessage,
            lineId,
            conversation: [],
            awaitingName: false,
            awaitingField: "birthday",
          });

          await client.replyMessage(event.replyToken, {
            type: "text",
            text: `‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Ñ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì ${userMessage}! üéâ\n${questionFlow[0].text}`,
          });
          continue;
        }
      }

      if (user.awaitingName) {
        user.name = userMessage;
        user.awaitingName = false;
        user.awaitingField = "birthday";
        await user.save();

        await client.replyMessage(event.replyToken, {
          type: "text",
          text: `‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Ñ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì ${userMessage}! üéâ\n${questionFlow[0].text}`,
        });
        continue;
      }

      if (user.awaitingField) {
        const currentField = user.awaitingField;
        user[currentField] = userMessage;

        const currentIndex = questionFlow.findIndex(q => q.key === currentField);
        const nextQuestion = questionFlow[currentIndex + 1];

        if (nextQuestion) {
          user.awaitingField = nextQuestion.key;
          await user.save();

          await client.replyMessage(event.replyToken, {
            type: "text",
            text: nextQuestion.text,
          });
        } else {
          user.awaitingField = null;
          await user.save();

          await client.replyMessage(event.replyToken, {
            type: "text",
            text: `‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì ${user.name}! üôè ‡∏ú‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏°‡∏ô‡∏π‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö üçö`,
          });
        }
        continue;
      }

      if (!user.awaitingName && userMessage === user.name) {
        await client.replyMessage(event.replyToken, {
          type: "text",
          text: `‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì ${user.name} ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏Ñ‡∏£‡∏±‡∏ö üòä`,
        });
        continue;
      }

      // üí¨ ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ Gemini ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
      const recentConversation = (user.conversation || []).slice(-10);
      const geminiResponse = await fetch(
        `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=${process.env.NEXT_PUBLIC_GEMINI_API_KEY}`,
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            contents: [
              ...recentConversation.map((msg: { role: string; text: string }) => ({
                role: msg.role,
                parts: [{ text: msg.text }],
              })),
              {
                role: "user",
                parts: [
                  {
                    text: `‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏∑‡πà‡∏≠ Mr. Rice ‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏±‡∏Å‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏ä‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÉ‡∏à‡∏î‡∏µ ‡∏≠‡πà‡∏≠‡∏ô‡πÇ‡∏¢‡∏ô ‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏ß‡∏Å‡∏•‡πâ‡∏≠‡∏á ‡∏ï‡∏≠‡∏ö‡∏™‡∏±‡πâ‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 4 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: "${userMessage}"`,
                  },
                ],
              },
            ],
          }),
        }
      );

      const data: GeminiResponse = await geminiResponse.json();
      const replyText =
        data.candidates?.[0]?.content.parts?.[0]?.text || getFriendlyFallback();

      await User.updateOne(
        { lineId },
        {
          $push: {
            conversation: {
              $each: [
                { role: "user", text: userMessage },
                { role: "assistant", text: replyText },
              ],
              $slice: -10,
            },
          },
        }
      );

      await client.replyMessage(event.replyToken, {
        type: "text",
        text: replyText,
      });
    }

    return NextResponse.json({ message: "OK" });
  } catch (error) {
    console.error("‚ùå Error:", error);
    return NextResponse.json({ error: String(error) }, { status: 500 });
  }
}
