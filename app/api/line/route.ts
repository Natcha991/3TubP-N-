// app/api/line/route.ts
import { NextRequest, NextResponse } from "next/server";
import crypto from "crypto";
import { Client } from "@line/bot-sdk";

const lineConfig = {
  channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN!,
  channelSecret: process.env.LINE_CHANNEL_SECRET!,
};

const client = new Client({ channelAccessToken: lineConfig.channelAccessToken });

// verify signature helper
function verifySignature(body: string, signature: string | null) {
  if (!signature) return false;
  const hash = crypto.createHmac("sha256", lineConfig.channelSecret).update(body).digest("base64");
  return hash === signature;
}

export async function POST(req: NextRequest) {
  const bodyText = await req.text();
  const signature = req.headers.get("x-line-signature");

  if (!verifySignature(bodyText, signature)) {
    return NextResponse.json({ error: "Invalid signature" }, { status: 401 });
  }

  let body;
  try {
    body = JSON.parse(bodyText);
  } catch (e) {
    return NextResponse.json({ error: "Invalid JSON" }, { status: 400 });
  }

  // handle each event (message, follow, postback, etc.)
  const events = body.events || [];
  await Promise.all(events.map(handleEvent));

  return NextResponse.json({ status: "ok" });
}

async function handleEvent(event: any) {
  try {
    if (event.type === "message" && event.message.type === "text") {
      const userText: string = event.message.text;

      // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏≠‡∏õ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° API ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô)
      // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏≠‡∏õ‡∏°‡∏µ endpoint /api/shared-data?key=...
      const sharedApiUrl = `${process.env.INTERNAL_API_BASE}/api/shared-data?query=${encodeURIComponent(userText)}`;
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏•‡∏∞ webhook ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å relative path ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÅ‡∏ó‡∏ô‡πÑ‡∏î‡πâ
      const resp = await fetch(sharedApiUrl);
      const info = resp.ok ? await resp.json() : { text: "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" };

      // ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      const replyText = info.text || `‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ${userText}`;
      await client.replyMessage(event.replyToken, {
        type: "text",
        text: replyText,
      });
    } else if (event.type === "follow") {
      // user added your bot -> welcome
      await client.replyMessage(event.replyToken, {
        type: "text",
        text: "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞ üòä",
      });
    } else if (event.type === "postback") {
      // handle postback
      await client.replyMessage(event.replyToken, {
        type: "text",
        text: `‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏î: ${JSON.stringify(event.postback)}`,
      });
    }
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° event ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
  } catch (err) {
    console.error("handleEvent error:", err);
  }
}
