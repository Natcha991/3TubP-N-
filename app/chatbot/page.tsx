'use client';

import { useRouter, useSearchParams } from "next/navigation";
import { useState, useRef, useEffect } from "react";
import { GoogleGenerativeAI } from "@google/generative-ai";
import menuData from '@/data/menu_image_mapping.json';

interface ChatMessage {
  from: string;
  text: string;
  timestamp: string;
}

export default function IngredientPage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const chatContainerRef = useRef<HTMLDivElement>(null);
  const isAutoSent = useRef(false);

  const [message, setMessage] = useState("");
  const [chatLog, setChatLog] = useState<ChatMessage[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [BgColor, setBgColor] = useState("")
  const [GrassColor, setGrassColor] = useState("")

  const topic = searchParams.get("topic");
  const userId = searchParams.get("id") || "anonymous";

  const allowedMenu = menuData;
  const allowedMenuNames = menuData.map((m) => m.name);

  const genAI = new GoogleGenerativeAI(
    process.env.NEXT_PUBLIC_GEMINI_API_KEY as string
  );

  const topicMessages: Record<string, string> = {
    water: "‡∏Å‡∏≤‡∏£‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏£‡∏î‡∏∑‡πà‡∏°‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà?",
    sleep: "‡∏≠‡∏¢‡∏≤‡∏Å‡∏ô‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏ö‡∏•‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏ï‡∏∑‡πà‡∏ô‡∏™‡∏î‡∏ä‡∏∑‡πà‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á?",
    chew: "‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏µ‡πâ‡∏¢‡∏ß‡∏ä‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡πà‡∏≠‡∏¢‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?",
  };

  const goto = () => router.push(`/home?id=${userId}`);

  useEffect(() => {
    const autoMessage = topic && topicMessages[topic];
    if (autoMessage && !isAutoSent.current) {
      isAutoSent.current = true;
      handleSendAuto(autoMessage);
    }
  }, [topic]);

  useEffect(() => {
    const fetchHistory = async () => {
      try {
        const res = await fetch(`/api/saveChat?userId=${userId}`);
        if (!res.ok) throw new Error("Failed to fetch chat history");
        const data = await res.json();
        const combinedChatLog = data.flatMap((item: any) => item.chatLog);
        setChatLog(combinedChatLog);
      } catch (error) {
        console.error("‚ùå Error fetching chat history:", error);
      }
    };
    fetchHistory();
  }, []);

  useEffect(() => {
    if (chatContainerRef.current) {
      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;
    }
  }, [chatLog, isLoading]);

  const getFormattedTime = (): string => {
    const now = new Date();
    const options: Intl.DateTimeFormatOptions = {
      hour: "2-digit",
      minute: "2-digit",
      hour12: false,
      timeZone: "Asia/Bangkok",
    };

    const currentHourString = new Intl.DateTimeFormat("th-TH", options).format(now);
    const currentHour = parseInt(currentHourString, 10);

    return new Intl.DateTimeFormat("th-TH", options).format(now);
  };

  const isNightTime = (): boolean => {
    const now = new Date();
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î TimeZone ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Asia/Bangkok ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    const options: Intl.DateTimeFormatOptions = {
      hour: "2-digit",
      hour12: false,
      timeZone: "Asia/Bangkok",
    };
    const currentHourString = new Intl.DateTimeFormat("th-TH", options).format(now);
    const currentHour = parseInt(currentHourString, 10); // ‡πÅ‡∏õ‡∏•‡∏á string ‡πÄ‡∏õ‡πá‡∏ô number

    // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏∏‡πà‡∏°‡∏ñ‡∏∂‡∏á‡∏ï‡∏µ‡∏´‡πâ‡∏≤: 19:00 (7 PM) ‡∏ñ‡∏∂‡∏á 05:59 (5:59 AM)
    if (currentHour >= 19 || currentHour < 6) {
      return true; // ‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô
    } else {
      return false; // ‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô
    }
  };

  useEffect(() => {
    if (isNightTime()) {
      console.log("‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏∏‡πà‡∏°‡∏ñ‡∏∂‡∏á‡∏ï‡∏µ‡∏´‡πâ‡∏≤");
      // ‡∏ó‡∏≥‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô
      setBgColor("bg-gradient-to-b from-purple-800 to-amber-200");
      setGrassColor("bg-[#55673E]") // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
    } else {
      console.log("‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ä‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏¢‡πá‡∏ô");
      // ‡∏ó‡∏≥‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô
      setBgColor("bg-gradient-to-b from-blue-400 to-orange-100");
      setGrassColor("bg-[#AFD39A]") // ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏Å‡∏ï‡∏¥
    }
  }, []); 


  const getFontSizeClass = (text: string, isAI: boolean) => {
    if (!isAI) return "text-base";
    if (text.length > 250) return "text-xs";
    if (text.length > 120) return "text-sm";
    return "text-base";
  };

  const handleSendAuto = async (msg: string) => {
    const userChat: ChatMessage = {
      from: "user",
      text: msg,
      timestamp: getFormattedTime(),
    };
    setChatLog((prev) => [...prev, userChat]);
    setIsLoading(true);
    try {
      const model = genAI.getGenerativeModel({
        model: "gemini-2.5-flash",
        systemInstruction: "‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏™‡∏±‡πâ‡∏ô ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 4 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î",
      });

      const historyText = [...chatLog, userChat]
        .map((msg) => `${msg.from === "user" ? "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" : "AI"}: ${msg.text}`)
        .join("\n");

      const result = await model.generateContent(historyText);
      const aiText = await result.response.text();

      const aiChat: ChatMessage = {
        from: "ai",
        text: aiText,
        timestamp: getFormattedTime(),
      };

      setChatLog((prev) => [...prev, aiChat]);

      await fetch("/api/saveChat", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ sessionId: userId, chatLog: [userChat, aiChat] }),
      });
    } catch (error) {
      setChatLog((prev) => [
        ...prev,
        {
          from: "ai",
          text: "‚ùå ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö AI ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö",
          timestamp: getFormattedTime(),
        },
      ]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleSend = async () => {
    if (message.trim() === "") return;

    const userChat: ChatMessage = {
      from: "user",
      text: message,
      timestamp: getFormattedTime(),
    };
    const allowedMenuNames = menuData.map((m) => m.name);
    setChatLog((prev) => [...prev, userChat]);
    setMessage("");
    setIsLoading(true);

    try {
      const model = genAI.getGenerativeModel({
        model: "gemini-2.5-flash",
        systemInstruction: `‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏±‡∏Å‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏ä‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÉ‡∏à‡∏î‡∏µ ‡∏≠‡πà‡∏≠‡∏ô‡πÇ‡∏¢‡∏ô ‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏î‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ô‡∏™‡∏ö‡∏≤‡∏¢‡πÜ




üìå **‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î**:
- ‡∏ï‡∏≠‡∏ö‡∏™‡∏±‡πâ‡∏ô ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 4 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
- ‡πÅ‡∏ö‡πà‡∏á‡∏¢‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢




üõë **‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç**:
- ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏°‡∏ô‡∏π‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏à‡∏≤‡∏Å "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á" ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô




üìã **‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥**:
${allowedMenuNames.map((name, i) => `${i + 1}. ${name}`).join('\n')}





‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ ‚Äú‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏°‡∏ô‡∏π‚Äù ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô  
‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢/‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ ‡∏´‡∏≤‡∏Å‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô  
‡πÅ‡∏ï‡πà‡∏Ñ‡∏ß‡∏£‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å
‡πÇ‡∏î‡∏¢‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≥‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏°‡∏ô‡∏π‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î



üß† **‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°**:
- ‡∏´‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏π‡∏î‡∏ñ‡∏∂‡∏á ‚Äú‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‚Äù (‡πÄ‡∏ä‡πà‡∏ô ‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤, ‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢) ‚Üí ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ô‡∏±‡πâ‡∏ô
- ‡∏´‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå ‚Äú‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏π‚Äù ‚Üí ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡πà‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏ô‡∏±‡πâ‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£, ‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏≠‡∏∞‡πÑ‡∏£, ‡∏ó‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£, ‡∏°‡∏µ‡∏™‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏≠‡∏∞‡πÑ‡∏£, ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡πÉ‡∏Ñ‡∏£ ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤ ‚Äú‡∏°‡∏µ‡∏ï‡∏£‡∏á‡πÑ‡∏´‡∏ô‡πÉ‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏ô‡∏µ‡πâ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡∏™‡∏á‡∏™‡∏±‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?‚Äù
- ‡∏´‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡∏≠ ‚Äú‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‚Äù ‚Üí ‡∏à‡∏±‡∏î‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö 3 ‡∏°‡∏∑‡πâ‡∏≠/‡∏ß‡∏±‡∏ô
- ‡∏´‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏™‡∏ô‡∏≠ ‚Äú‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‚Äù ‚Üí ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ô‡∏±‡πâ‡∏ô
- ‡∏´‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏∞‡∏Å‡∏¥‡∏ô‡∏≠‡∏∞‡πÑ‡∏£ ‚Üí ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡πÅ‡∏•‡∏∞‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤ ‚Äú‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏≠‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏ô‡∏µ‡πâ‡∏°‡∏±‡πâ‡∏¢?‚Äù
- ‡∏´‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏π‡∏î‡∏ñ‡∏∂‡∏á ‚Äú‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‚Äù ‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì coach ‚Üí ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏±‡πâ‡∏ô ‡πÜ ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏¥‡∏î‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ä‡∏µ‡πâ‡∏ô‡∏≥
- ‡∏´‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£,‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û,‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏ô‡πÄ‡∏≠‡∏á ‚Üí ‡∏ï‡∏≠‡∏ö‡∏ß‡πà‡∏≤:
"‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ú‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö"




üîí **‡∏´‡πâ‡∏≤‡∏°‡∏ù‡πà‡∏≤‡∏ù‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÇ‡∏î‡∏¢‡πÄ‡∏î‡πá‡∏î‡∏Ç‡∏≤‡∏î** `,
      });

      const historyText = [...chatLog, userChat]
        .map((msg) => `${msg.from === "user" ? "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" : "AI"}: ${msg.text}`)
        .join("\n");

      const result = await model.generateContent(historyText);
      const aiText = await result.response.text();

      const aiChat: ChatMessage = {
        from: "ai",
        text: aiText,
        timestamp: getFormattedTime(),
      };

      setChatLog((prev) => [...prev, aiChat]);

      await fetch("/api/saveChat", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ sessionId: userId, chatLog: [userChat, aiChat] }),
      });
    } catch (error) {
      setChatLog((prev) => [
        ...prev,
        {
          from: "ai",
          text: "‚ùå ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö AI ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö",
          timestamp: getFormattedTime(),
        },
      ]);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="relative font-prompt min-h-screen flex flex-col">
      {/* Background gradients */}
      <div className={`absolute h-[450px] w-full z-[-2] ${BgColor}`}></div>
      <div className={`absolute h-[500px] top-[28rem] w-full z-[-2] ${GrassColor}`}></div>

      {/* Header */}
      <div className="relative z-20 flex justify-between m-[2rem] items-center w-[calc(100%-4rem)]">
        <div onClick={goto} className="bg-white h-[50px] flex justify-center cursor-pointer items-center w-[50px] rounded-full shadow-xl">
          <img className="h-[15px]" src="Group%2084.png" alt="Back" />
        </div>
        <h1 className="font-bold text-2xl text-white">3 TupP chat</h1>
        <img src="/image%2075.png" alt="User avatar" />
      </div>

      {/* Chat container */}
      <div className="sm:flex flex-col items-center">
        <div className="absolute top-[15rem] left-[-3.5rem] xl:left-[10rem] z-0">
          <img className="w-[220px] animate-sizeUpdown" src="/image%2076.png" alt="Decorative icon" />
        </div>
        <div className="h-[650px] xl:h-[500px] xl:w-[700px] overflow-y-auto pt-[4rem] relative z-10">
          <div ref={chatContainerRef} className="flex flex-col gap-[1rem] px-[1.5rem] ml-[4rem] pb-[2rem]">
            {chatLog.map((msg, index) => (
              <div key={index} className={`flex flex-col items-center gap-1 ${msg.from === "user" ? "self-end" : "self-start"}`}>
                {msg.from === "user" && (
                  <h1 className="text-white text-[0.7rem] self-center">{msg.timestamp}</h1>
                )}
                <div className={`flex items-start gap-2 ${msg.from === "user" ? "flex-row-reverse" : ""}`}>
                  <img src="/image%2075.png" alt="avatar" className="w-[40px] h-[40px] rounded-full" />
                  <div className={`break-words p-2 rounded-2xl shadow ${msg.from === "user" ? "bg-blue-500 text-white" : `bg-white text-gray-800 ${getFontSizeClass(msg.text, true)}`} max-w-[calc(100vw-150px)]`}>
                    {msg.text}
                  </div>
                </div>
              </div>
            ))}
            {isLoading && (
              <div className="flex items-start gap-2">
                <img src="/image%2075.png" alt="AI avatar" className="w-[40px] h-[40px] rounded-full" />
                <div className="max-w-[calc(100vw-120px)] break-words p-2 bg-gray-200 rounded-2xl shadow text-base">
                  AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏¥‡∏î‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö...
                </div>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Input field */}
      <div className="bg-white w-[90%] max-w-[500px] mx-auto mb-[4rem] rounded-full h-[45px] px-4 flex items-center shadow-md absolute bottom-0 left-1/2 -translate-x-1/2 z-20">
        <input
          className="flex-1 outline-none px-2"
          type="text"
          placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°..."
          value={message}
          onChange={(e) => setMessage(e.target.value)}
          onKeyDown={(e) => e.key === "Enter" && handleSend()}
          disabled={isLoading}
        />
        <img
          className="w-[20px] h-[20px] cursor-pointer rotate-180"
          src="/Group%2084.png"
          alt="Send"
          onClick={handleSend}
          style={{
            opacity: isLoading ? 0.5 : 1,
            cursor: isLoading ? "not-allowed" : "pointer",
          }}
        />
      </div>
    </div>
  );
}
